// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkSpeed.Data.DataContexts;

namespace WorkSpeed.Data.Migrations
{
    [DbContext(typeof(WorkSpeedDbContext))]
    [Migration("20190212153752_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorkSpeed.Data.Models.ActionDetails.DoubleAddressActionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DoubleAddressActionId")
                        .IsRequired();

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<byte?>("ReceiverAddressBox");

                    b.Property<string>("ReceiverAddressLetter");

                    b.Property<byte?>("ReceiverAddressRow");

                    b.Property<byte?>("ReceiverAddressSection");

                    b.Property<byte?>("ReceiverAddressShelf");

                    b.Property<byte?>("SenderAddressBox");

                    b.Property<string>("SenderAddressLetter");

                    b.Property<byte?>("SenderAddressRow");

                    b.Property<byte?>("SenderAddressSection");

                    b.Property<byte?>("SenderAddressShelf");

                    b.HasKey("Id");

                    b.HasIndex("DoubleAddressActionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiverAddressLetter", "ReceiverAddressRow", "ReceiverAddressSection", "ReceiverAddressShelf", "ReceiverAddressBox");

                    b.HasIndex("SenderAddressLetter", "SenderAddressRow", "SenderAddressSection", "SenderAddressShelf", "SenderAddressBox");

                    b.ToTable("DoubleAddressDetails","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.ActionDetails.InventoryActionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountingQuantity")
                        .HasColumnType("int");

                    b.Property<byte>("AddressBox");

                    b.Property<string>("AddressLetter")
                        .IsRequired();

                    b.Property<byte>("AddressRow");

                    b.Property<byte>("AddressSection");

                    b.Property<byte>("AddressShelf");

                    b.Property<string>("InventoryActionId")
                        .IsRequired();

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryActionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("AddressLetter", "AddressRow", "AddressSection", "AddressShelf", "AddressBox");

                    b.ToTable("InventoryDetails","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.ActionDetails.ReceptionActionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AddressBox");

                    b.Property<string>("AddressLetter")
                        .IsRequired();

                    b.Property<byte>("AddressRow");

                    b.Property<byte>("AddressSection");

                    b.Property<byte>("AddressShelf");

                    b.Property<bool>("IsClientScanning")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceptionActionId")
                        .IsRequired();

                    b.Property<short>("ScanQuantity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceptionActionId");

                    b.HasIndex("AddressLetter", "AddressRow", "AddressSection", "AddressShelf", "AddressBox");

                    b.ToTable("ReceptionDetails","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.DoubleAddressAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("EmployeeId1");

                    b.Property<int>("OperationId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("OperationId");

                    b.ToTable("DoubleAddressActions","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.InventoryAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("EmployeeId1");

                    b.Property<int>("OperationId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("OperationId");

                    b.ToTable("InventoryActions","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.OtherAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("EmployeeId1");

                    b.Property<int>("OperationId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("OperationId");

                    b.ToTable("OtherActions","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.ReceptionAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("EmployeeId")
                        .IsRequired();

                    b.Property<string>("EmployeeId1");

                    b.Property<int>("OperationId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("OperationId");

                    b.ToTable("ReceptionActions","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.ShipmentAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(7)");

                    b.Property<float?>("ClientCargoQuantity")
                        .HasColumnType("real");

                    b.Property<float?>("CommonCargoQuantity")
                        .HasColumnType("real");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("EmployeeId1");

                    b.Property<int>("OperationId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Volume")
                        .HasColumnType("real");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("OperationId");

                    b.ToTable("ShipmentActions","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Address", b =>
                {
                    b.Property<string>("Letter")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<byte>("Row");

                    b.Property<byte>("Section")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Shelf")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Box")
                        .HasColumnType("tinyint");

                    b.Property<string>("BoxType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<float?>("Complexity")
                        .HasColumnType("real");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<float?>("Length")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<int?>("PositionId");

                    b.Property<double?>("Volume")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("[Width] * [Length] * [Height]");

                    b.Property<float?>("VolumeCoefficient")
                        .HasColumnType("real");

                    b.Property<float?>("Width")
                        .HasColumnType("real");

                    b.HasKey("Letter", "Row", "Section", "Shelf", "Box");

                    b.HasIndex("PositionId");

                    b.ToTable("Addresses","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficialName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("SalaryPerOneHour")
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.ToTable("Appointments","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviations = "гр.;гр;груз;грузч.;",
                            InnerName = "Грузчик",
                            OfficialName = "Грузчик",
                            SalaryPerOneHour = 47.85m
                        },
                        new
                        {
                            Id = 2,
                            Abbreviations = "кл.;кладовщик;кл;клад;клад.;",
                            InnerName = "Кладовщик на РРЦ",
                            OfficialName = "Кладовщик склада",
                            SalaryPerOneHour = 52.64m
                        },
                        new
                        {
                            Id = 3,
                            Abbreviations = "пр.;приёмщик;приемщик;пр;",
                            InnerName = "Кладовщик приемщик",
                            OfficialName = "Кладовщик-приемщик",
                            SalaryPerOneHour = 57.42m
                        },
                        new
                        {
                            Id = 4,
                            Abbreviations = "вод.;водитель;вод;карщик;",
                            InnerName = "Водитель погрузчика",
                            OfficialName = "Водитель погрузчика",
                            SalaryPerOneHour = 52.64m
                        },
                        new
                        {
                            Id = 5,
                            Abbreviations = "ст.кл.;старший;ст;ст.;старшийкладовщик;ст.клад.;",
                            InnerName = "Старший кладовщик на РРЦ",
                            OfficialName = "Старший кладовщик склада",
                            SalaryPerOneHour = 62.21m
                        },
                        new
                        {
                            Id = 6,
                            Abbreviations = "зам.пр.;зампоприёмке;",
                            InnerName = "Заместитель управляющего склада по отгрузке",
                            OfficialName = "Менеджер по отправке груза",
                            SalaryPerOneHour = 95.70m
                        },
                        new
                        {
                            Id = 7,
                            Abbreviations = "зам.отгр.;зампоотгрузке;",
                            InnerName = "Заместитель управляющего склада по приемке",
                            OfficialName = "Менеджер по приему груза",
                            SalaryPerOneHour = 92.22m
                        },
                        new
                        {
                            Id = 8,
                            Abbreviations = "упр.скл.;управляющий;упр.;упр;упр.складом;",
                            InnerName = "Управляющий РРЦ",
                            OfficialName = "Управляющий складом",
                            SalaryPerOneHour = 119.63m
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)");

                    b.Property<double?>("MaxVolume")
                        .HasColumnType("float");

                    b.Property<double?>("MinVolume")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "кат.1",
                            MaxVolume = 2.5,
                            Name = "Товары до 2,5 литров"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "кат.2",
                            MaxVolume = 5.0,
                            MinVolume = 2.5,
                            Name = "Товары до 5 литров"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "кат.3",
                            MaxVolume = 25.0,
                            MinVolume = 5.0,
                            Name = "Товары до 25 литров"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "кат.4",
                            MaxVolume = 100.0,
                            MinVolume = 25.0,
                            Name = "Товары до 100 литров"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "кат.5",
                            MaxVolume = 250.0,
                            MinVolume = 100.0,
                            Name = "Товары до 250 литров"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "кат.6",
                            MinVolume = 250.0,
                            Name = "Товары от 250 литров"
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.CategoryCategorySet", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("CategorySetId");

                    b.HasKey("CategoryId", "CategorySetId");

                    b.HasIndex("CategorySetId");

                    b.ToTable("CategoryCategorySet");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategorySetId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategorySetId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            CategorySetId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            CategorySetId = 1
                        },
                        new
                        {
                            CategoryId = 5,
                            CategorySetId = 1
                        },
                        new
                        {
                            CategoryId = 6,
                            CategorySetId = 1
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.CategorySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CategorySets","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Категории Владивостока"
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<int?>("AppointmentId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmoker")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PositionId");

                    b.Property<DateTime?>("ProbationEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RankNumber");

                    b.Property<int?>("ShiftId");

                    b.Property<int?>("ShortBreakScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RankNumber");

                    b.HasIndex("ShiftId");

                    b.HasIndex("ShortBreakScheduleId");

                    b.ToTable("Employees","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("Complexity")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OperationGroup")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Operations","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Complexity = 1f,
                            Name = "Сканирование товара",
                            OperationGroup = "Reception"
                        },
                        new
                        {
                            Id = 2,
                            Complexity = 1f,
                            Name = "Сканирование транзитов",
                            OperationGroup = "Reception"
                        },
                        new
                        {
                            Id = 3,
                            Complexity = 1f,
                            Name = "Размещение товара",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 4,
                            Complexity = 1f,
                            Name = "Перемещение товара",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 5,
                            Complexity = 1f,
                            Name = "Подтоварка",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 6,
                            Complexity = 1f,
                            Name = "Верт. дефрагментация",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 7,
                            Complexity = 1f,
                            Name = "Гор. дефрагментация",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 8,
                            Complexity = 1f,
                            Name = "Подбор товара",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 9,
                            Complexity = 1f,
                            Name = "Подбор клиентского товара",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 10,
                            Complexity = 1f,
                            Name = "Подбор товаров покупателей",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 11,
                            Complexity = 1f,
                            Name = "Предварительный подбор товара",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 12,
                            Complexity = 1f,
                            Name = "Упаковка товара в места",
                            OperationGroup = "Gathering"
                        },
                        new
                        {
                            Id = 13,
                            Complexity = 1f,
                            Name = "Инвентаризация",
                            OperationGroup = "Inventory"
                        },
                        new
                        {
                            Id = 14,
                            Complexity = 1f,
                            Name = "Выгрузка машины",
                            OperationGroup = "Shipment"
                        },
                        new
                        {
                            Id = 15,
                            Complexity = 1f,
                            Name = "Погрузка машины",
                            OperationGroup = "Shipment"
                        },
                        new
                        {
                            Id = 16,
                            Complexity = 1f,
                            Name = "Прочие операции",
                            OperationGroup = "Other"
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("Complexity")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Positions","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviations = "кр.;кр;",
                            Complexity = 1f,
                            Name = "Крупняк"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviations = "пр.;приемка;пр;",
                            Complexity = 1f,
                            Name = "Приёмка"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviations = "отгр.;отгр;от.;от;",
                            Complexity = 1f,
                            Name = "Отгрузка"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviations = "дор.;дор;",
                            Complexity = 1f,
                            Name = "Дорогая"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviations = "мез.1;мезонин1;мез1;",
                            Complexity = 1f,
                            Name = "Мезонин, 1-й этаж"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviations = "мез.2;мезонин2;мез2;",
                            Complexity = 1f,
                            Name = "Мезонин, 2-й этаж"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviations = "мез.3;мезонин3;мез3;",
                            Complexity = 1f,
                            Name = "Мезонин, 3-й этаж"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviations = "мез.4;мезонин4;мез4;",
                            Complexity = 1f,
                            Name = "Мезонин, 4-й этаж"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviations = "рас.;расстановка;рас;",
                            Complexity = 1f,
                            Name = "Расстановка"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviations = "ст.см.мез.;ссммез;",
                            Complexity = 1f,
                            Name = "Старший смены, мезонин"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviations = "ст.см.кр.;ссмкр;",
                            Complexity = 1f,
                            Name = "Старший смены, крупняк"
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Product", b =>
                {
                    b.Property<int>("Id");

                    b.Property<float?>("CartonHeight")
                        .HasColumnType("real");

                    b.Property<float?>("CartonLength")
                        .HasColumnType("real");

                    b.Property<int?>("CartonQuantity")
                        .HasColumnType("int");

                    b.Property<float?>("CartonVolume")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("real")
                        .HasComputedColumnSql("[ItemWidth] * [ItemLength] * [ItemHeight] * [CartonQuantity]");

                    b.Property<float?>("CartonWeight")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("real")
                        .HasComputedColumnSql("[ItemWeight] * [CartonQuantity]");

                    b.Property<float?>("CartonWidth")
                        .HasColumnType("real");

                    b.Property<float?>("GatheringComplexity")
                        .HasColumnType("real");

                    b.Property<float?>("InventoryComplexity")
                        .HasColumnType("real");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<float?>("ItemHeight")
                        .HasColumnType("real");

                    b.Property<float?>("ItemLength")
                        .HasColumnType("real");

                    b.Property<float?>("ItemVolume")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("real")
                        .HasComputedColumnSql("[ItemWidth] * [ItemLength] * [ItemHeight]");

                    b.Property<float?>("ItemWeight")
                        .HasColumnType("real");

                    b.Property<float?>("ItemWidth")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(196);

                    b.Property<float?>("PackagingComplexity")
                        .HasColumnType("real");

                    b.Property<int?>("ParentId");

                    b.Property<float?>("PlacingComplexity")
                        .HasColumnType("real");

                    b.Property<float?>("ScanningComplexity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Products","dbo");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Rank", b =>
                {
                    b.Property<int>("Number");

                    b.Property<decimal?>("OneHourCost")
                        .HasColumnType("decimal");

                    b.HasKey("Number");

                    b.ToTable("Ranks","dbo");

                    b.HasData(
                        new
                        {
                            Number = 2,
                            OneHourCost = 163m
                        },
                        new
                        {
                            Number = 3,
                            OneHourCost = 180m
                        },
                        new
                        {
                            Number = 4,
                            OneHourCost = 200m
                        },
                        new
                        {
                            Number = 5,
                            OneHourCost = 220m
                        },
                        new
                        {
                            Number = 6,
                            OneHourCost = 242.42m
                        },
                        new
                        {
                            Number = 7,
                            OneHourCost = 266.67m
                        },
                        new
                        {
                            Number = 8,
                            OneHourCost = 300m
                        },
                        new
                        {
                            Number = 9,
                            OneHourCost = 342.42m
                        },
                        new
                        {
                            Number = 10,
                            OneHourCost = 366.66m
                        },
                        new
                        {
                            Number = 11,
                            OneHourCost = 400m
                        },
                        new
                        {
                            Number = 12,
                            OneHourCost = 442.42m
                        },
                        new
                        {
                            Number = 13,
                            OneHourCost = 466.66m
                        },
                        new
                        {
                            Number = 14,
                            OneHourCost = 533.33m
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Lunch")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeSpan?>("RestTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Shifts","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = new TimeSpan(0, 12, 0, 0, 0),
                            Lunch = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Дневная смена",
                            RestTime = new TimeSpan(0, 1, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Duration = new TimeSpan(0, 12, 0, 0, 0),
                            Lunch = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Ночная смена",
                            RestTime = new TimeSpan(0, 1, 0, 0, 0),
                            StartTime = new TimeSpan(0, 20, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.ShortBreakSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("FirstBreakTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<TimeSpan>("Periodicity")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("ShortBreaks","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            FirstBreakTime = new TimeSpan(0, 9, 55, 0, 0),
                            Name = "Перекуры для некурящих",
                            Periodicity = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            FirstBreakTime = new TimeSpan(0, 8, 55, 0, 0),
                            Name = "Перекуры для курящих",
                            Periodicity = new TimeSpan(0, 1, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.ActionDetails.DoubleAddressActionDetail", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Actions.DoubleAddressAction", "DoubleAddressAction")
                        .WithMany("DoubleAddressDetails")
                        .HasForeignKey("DoubleAddressActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Address", "ReceiverAddress")
                        .WithMany()
                        .HasForeignKey("ReceiverAddressLetter", "ReceiverAddressRow", "ReceiverAddressSection", "ReceiverAddressShelf", "ReceiverAddressBox");

                    b.HasOne("WorkSpeed.Data.Models.Address", "SenderAddress")
                        .WithMany()
                        .HasForeignKey("SenderAddressLetter", "SenderAddressRow", "SenderAddressSection", "SenderAddressShelf", "SenderAddressBox");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.ActionDetails.InventoryActionDetail", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Actions.InventoryAction", "InventoryAction")
                        .WithMany("InventoryActionDetails")
                        .HasForeignKey("InventoryActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressLetter", "AddressRow", "AddressSection", "AddressShelf", "AddressBox")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.ActionDetails.ReceptionActionDetail", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Actions.ReceptionAction", "ReceptionAction")
                        .WithMany("ReceptionActionDetails")
                        .HasForeignKey("ReceptionActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressLetter", "AddressRow", "AddressSection", "AddressShelf", "AddressBox")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.DoubleAddressAction", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Employee")
                        .WithMany("DoubleAddressActions")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("WorkSpeed.Data.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.InventoryAction", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Employee")
                        .WithMany("InventoryActions")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("WorkSpeed.Data.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.OtherAction", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Employee")
                        .WithMany("OtherActions")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("WorkSpeed.Data.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.ReceptionAction", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Employee")
                        .WithMany("ReceptionActions")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("WorkSpeed.Data.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Actions.ShipmentAction", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.Employee")
                        .WithMany("ShipmentActions")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("WorkSpeed.Data.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Address", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.CategoryCategorySet", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Category", "Category")
                        .WithMany("CategorySets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkSpeed.Data.Models.CategorySet", "CategorySet")
                        .WithMany("Categories")
                        .HasForeignKey("CategorySetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Employee", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("WorkSpeed.Data.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("WorkSpeed.Data.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankNumber");

                    b.HasOne("WorkSpeed.Data.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("WorkSpeed.Data.Models.ShortBreakSchedule", "ShortBreakSchedule")
                        .WithMany()
                        .HasForeignKey("ShortBreakScheduleId");
                });

            modelBuilder.Entity("WorkSpeed.Data.Models.Product", b =>
                {
                    b.HasOne("WorkSpeed.Data.Models.Product", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("ForeignKey_ProductChild_ProductParent");
                });
#pragma warning restore 612, 618
        }
    }
}
